8         8     low        0.4
9         9     med        0.4
10       10     med        0.4
11       11     med        0.8
12       12    high        0.8
13       13     med        0.8
14       14     med        0.8
15       15    high        0.8
16       16    high        1.2
17       17    high        1.2
18       18    high        1.2
19       19    high        1.2
20       20     med        1.2 ')
head(patient.fatigue)
attach(patient.fatigue)
aov(drugA_dose ~ fatigue)
summary(aov(drugA_dose ~ fatigue))
model <- aov(drugA_dose ~ fatigue)
plot(model)
par(mfrow=c(2,2))
plot(model)
modelA <- model
rm(model)
modelB <- update(modelA, subset=(patients != 20))
summary(modelB)
summary.lm(modelB)
patient.sex <- as.factor(c("F", "F", "F", "M", "M", "F", "M", "M", "M", "F", "F", "M", "M", "F", "F", "F", "M", "M", "F", "M"))
modelC = aov(drugA_dose ~ fatigue * patient.sex)
summary(modelC)
anova(modelA, modelC)
cmp1.ld <- read.table(header=TRUE, text='
lethaldose sex numdead numalive
1           0   M       1       19
2           1   M       3       17
3           2   M       9       11
4           3   M      14        6
5           4   M      17        3
6           5   M      20        0
7           0   F       0       20
8           1   F       2       18
9           2   F       2       18
10          3   F       3       17
11          4   F       4       16
12          5   F       6       14
')
detach(patient.fatigue)
attach(cmp1.ld)
head(cmp1.ld)
proportion_dead <- numdead/20
proportion_dead
plot(proportion_dead ~ lethaldose, pch=as.character(sex))
par(mfrow=c(1,1))
plot(proportion_dead ~ lethaldose, pch=as.character(sex))
counts <- cbind(numdead, numalive)
counts
cmp1.ld.model <- glm(counts ~ sex * lethaldose, family=binomial)
summary(cmp1.ld.model)
3.939/8
cmp1.ld.model <- glm(counts ~ sex * lethaldose, family=quasibinomial)
summary(cmp1.ld.model)
cmp1.ld.model <- glm(counts ~ sex * lethaldose, family=binomial)
cmp1.ld.model2 <- glm(counts ~ sex * lethaldose, family=quasibinomial)
cmp1.ld.model3 <- update(cmp1.ld.model, ~. - sex:lethaldose)
summary(cmp1.ld.model3)
11.975/9
anova(cmp1.ld.model, cmp1.ld.model3, test="Chi")
pregnancies <- sample(0:25, 300,replace=T)
glucose <- sample(65:200, 300,replace=T)
pressure <-  sample(50:120, 300,replace=T)
insulinD <- abs(rnorm(150, 450, 100))
insulinN <- abs(rnorm(150, 65, 75))
insulin <- c(insulinD, insulinN)
weight <- sample(20:70, 300,replace=T)
require(mgcv)
mouse.data.gam <- gam(pregnancies ~ s(glucose) + s(pressure) + s(insulin) + s(weight))
summary(mouse.data.gam)
par(mfrow=c(2,2))
plot(mouse.data.gam)
set.seed(459)
Bluegill.length <- sample(seq(15, 22.5, by=0.5), 50, replace=T)
Bluegill.weight <- sample(seq(0.2, 0.8, by=0.05), 50, replace=T)
Bowfin.length <- sample(seq(46, 61, by=0.5), 50, replace=T)
Bowfin.weight <- sample(seq(1.36, 3.2, by=0.5), 50, replace=T)
Carp.length <- sample(seq(30, 75, by=1), 50, replace=T)
Carp.weight <- sample(seq(0.2, 3.5, by=0.1), 50, replace=T)
Goldeye.length <- sample(seq(25, 38, by=0.5), 50, replace=T)
Goldeye.weight <- sample(seq(0.4, 0.54, by=0.01), 50, replace=T)
Largemouth_Bass.length <- sample(seq(22, 55, by=0.5), 50, replace=T)
Largemouth_Bass.weight <- sample(seq(0.68, 1.8, by=0.01), 50, replace=T)
weight <-c(Bluegill.weight, Bowfin.weight, Carp.weight, Goldeye.weight, Largemouth_Bass.weight)
length <-c(Bluegill.length, Bowfin.length, Carp.length, Goldeye.length, Largemouth_Bass.length)
speed <- rnorm(50*5, 7.2, sd=1.8)
fish <- c(rep("Bluegill", 50), rep("Bowfin", 50), rep("Carp", 50), rep("Goldeye", 50), rep("Largemouth_Bass", 50))
fish.data <- data.frame(length, weight, speed, fish)
str(fish.data)
plot3DfishData <- function(x, y, z, data=fish.data){
require("scatterplot3d")
#To store the axis labels
fish.variable <- colnames(data)
scatterplot3d(data[, x], data[, y], data[, z], color =  c("blue", "black", "red", "green", "turquoise")[data$fish], pch = 19,   xlab=fish.variable[x], ylab=fish.variable[y], zlab=fish.variable[z])
}
library(MASS)
fish.lda <- lda(fish ~ ., data=fish.data, prior=c(1,1,1,1,1)/5)
fish.lda
fish.lda$counts
fish.lda$svd
set.seed(10)
train100 <- sample(1:nrow(fish.data), 100)
table(fish.data$fish[train100])
fish100.lda <- lda(fish ~., data=fish.data, prior=c(1,1,1,1,1)/5, subset=train100)
predict.fish100 <- predict(fish100.lda)
table(fish.data$fish[train100], predict.fhsh100$class)
table(fish.data$fish[train100], predict.fish100$class)
set.seed(1)
rpois(5,2)
rpois(5,2)
set.seed(1)
rpois(5,2)
set.seed(10)
x <- rep(0:1, each=5)
x
e <- rnorm(10, 0 ,20)
y <- 0.5 + 2*x + e
plot(x,y)
require(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
install.packages("swirl")
require(swirl)
swirl()
install_from_swirl("R Programming")
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z * 2 + 10000
info()
z * 2 + 10000
z * 2 + 1000
my_div
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files)
old.dir <- getwd()
dir.create("testdir")
setwd("./testdir")
setwd("testdir")
getwd()
setwd("..")
setwd("testdir")
info()
getwd()
setwd("./Documents/")
setwd(testdir)
setwd("testdir")
file.create("mytest.R")
dir()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path('mytest3.R')
file.path('folder1','folder2')
?dir.create
dir.create('testdir2', file.path('testdir2','testdir3'), recursive=T)
dir.create(file.path('testdir2','testdir3'), recursive=T)
dir.create(file.path('testdir2','testdir3'), recursive=TRUE)
unlink('testdir2',recursive=TRUE)
setwd(old.dir)
unlink(testdir, recursive=T)
getwd()
unlink("testdir", recursive=T)
unlink("testdir", recursive=TRUE)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by=0.5)
seq(5,10,length=30)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My","name","is")
my_char
paste(my_char, collapse=" ")
my_name <- c(my_char, "Jae")
my_char
my_name
paste(my_name, collapse=" ")
paste("Hello", "world!", sep=" ")
paste(1:3, c("X","Y","Z"), sep="")
paste(LETTERS, 1:4, sep="-")
source("http://bioconductor.org/biocLite.R")
biocLite("ddCt")
q()
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(url, destfile="first.csv")
data <- read.csv("first.csv")
head(data)
dim(data)
str(data)
sum(data$VAL == 24)
data$VAL
sum(data$VAL == 24, na.rm=TRUE)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(url, "second.xlsx")
install.packages("xlsx")
require(xlsx)
require(xlsx)
require(rJava)
require(xlsx)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(url, "second.xlsx")
?read.xlsx
dat <- read.xlsx("second.xlsx", rowIndex=18:23, colIndex=7:15)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(url)
download.file(url, dest="second.xlsx")
?rread.xlsx
?read.xlsx
dat <- read.xlsx("getdata-data-DATA.gov_NGAP.xlsx", sheetIndex=1, rowIndex=18:23, colIndex=7:15)
dat
sum(dat$Zip*dat$Ext, na.rm=T)
require(XML)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(url, useInternal=TRUE)
download.file(url, dest="third.xml")
xmldoc <- xmlTreeParse("third.xml", useInternal=TRUE)
head(xmldoc)
xmldoc
rootnode <- xmlRoot(xmldoc)
xmlSapply(rootnode, "21231")
xmlSApply(rootnode, "21231")
xmlSApply(rootNode, xmlValue)
xmlSApply(rootnode, xmlValue)
class(xmlSApply(rootnode, xmlValue))
length(xmlSApply(rootnode, xmlValue))
require(stringr)
str_count(xmlSApply(rootnode, xmlValue), "21231")
install.packages("data.table")
require(data.table)
?fread
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", dest="fifth.csv")
DT <- fread("fifth.csv")
head(DT)
DT[,mean(pwgtp15),by=SEX]
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "8bbc49a9621e48335b4d",
secret = "0e7bb8d1c9ae9dfd257de891dfa3f5afd8283528")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "8bbc49a9621e48335b4d",
secret = "0e7bb8d1c9ae9dfd257de891dfa3f5afd8283528")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
setwd("C:/Users/jae/Documents/datasciencecoursera/")
train.set <- read.table("UCI HAR Dataset/train/X_train.txt", header=F)
test.set <- read.table("UCI HAR Dataset/test/X_test.txt", header=F)
head(train.set[,1:5])
total.set <- rbind(train.set, test.set)
feature.labels <- read.table("UCI HAR Dataset/features.txt", header=F)
length(feature.labels)
head(feature.labels)
dim(feature.labels)
dim(total.set)
mean_idx <- match("mean", feature.labels$V2)
mean_idx
?match
head(feature.labels)
head(feature.labels$V2)
match("mean", feature.labels$V2)
"mean" %in% feature.labels$V2
1:10 %in% c(1,3,5,9)
feature.labels <- read.table("UCI HAR Dataset/features.txt", header=F, stringsAsFactors=F)
feature.labels <- feature.labels$V2
mean_idx <- grep("mean()", feature.labels)
std_idx <- grep("std()", feature.labels)
mean_idx
std_idx
intersect(mean_idx, std_idx)
mean_and_std_data <- total.set[, c(mean_idx, std_idx)]
dim(mean_and_std_data)
dim(train.set)
dim(test.set)
activity.labels <- read.table("UCI HAR Dataset/activity_labels.txt", header=F)
head(activity.labels)
str(activity.labels)
activity.labels <- read.table("UCI HAR Dataset/activity_labels.txt", header=F, stringsAsFactors = F)
train.activity <- read.table("UCI HAR Dataset/train/y_train.txt", header=F, stringsAsFactors = F)
test.activity <- read.table("UCI HAR Dataset/test/y_test.txt", header=F, stringsAsFactors = F)
head(activity.labels)
head(train.activity)
total.activity <- c(train.activity, test.activity)
m <- merge(activity.labels, total.activity, by.x=V1, by.y=V1)
total.activity$V2 <- activity.labels$V2[total.activity$V1 == activity.labels$V1]
head(total.activity)
total.activity$V2 <- activity.labels$V2[total.activity$V1]
head(total.activity)
total.activity <- c(train.activity, test.activity)
head(total.activity)
total.activity <- c(train.activity, test.activity)
total.activity.descr.labels <- activity.labels$V2[total.activity]
activity.labels$V2[total.activity]
?map
??map
activity.labels
activity.labels <- read.table("UCI HAR Dataset/activity_labels.txt", header=F)
head(activity.labels)
str(activity.labels)
activity.labels$V2
?factor
factor(activity.labels$V2, levels=activity.labels$V1)
factor(activity.labels$V2)
factor(activity.labels$V2, levels=activity.labels$V1)
factor(activity.labels$V2, ordered=TRUE)
mapLevels(activity.labels$V2)
activity.labels <- read.table("UCI HAR Dataset/activity_labels.txt", header=F, stringsAsFactors=F)
head(activity.labels)
length(total.activity)
total.activity
class(total.activity)
head(train.activity)
train.activity <- as.vector(read.table("UCI HAR Dataset/train/y_train.txt", header=F, stringsAsFactors = F))
class(train.activity)
train.activity <- read.table("UCI HAR Dataset/train/y_train.txt", header=F, stringsAsFactors = F)$V1
test.activity <- read.table("UCI HAR Dataset/test/y_test.txt", header=F, stringsAsFactors = F)$V1
length(train.activity)
length(test.activity)
total.activity <- c(train.activity, test.activity)
activity.labels$V2[c(5,5,3,4)]
total.activity.descr.labels <- activity.labels$V2[total.activity]
head(total.activity.descr.labels)
activity.labels
names(mean_and_std_data) <- feature.labels[c(mean_idx, std_idx)]
str(mean_and_std_data)
train.subject <- read.table("UCI HAR Dataset/train/subject_train.txt", header=F)
head(train.subject)
train.subject <- read.table("UCI HAR Dataset/train/subject_train.txt", header=F)$V1
test.subject <- read.table("UCI HAR Dataset/test/subject_test.txt", header=F)$V1
total.subject <- c(train.subject, test.subject)
head(total.subject)
length(total.subject)
dim(mmean_and_std_data)
dim(mean_and_std_data)
dim(total.activity)
length(total.activity)
tapply(mean_and_std_data, total.subject, colMeans)
dim(mean_and_std_data)
?tapply
tapply(as.matrix(mean_and_std_data), total.subject, colMeans)
train.subject
test.subject
total.subject
s <- split(mean_and_std_data, total.subject)
head(s[[1]])
data <- rbind(total.subject, total.activity.descr.labels, mean_and_std_data)
data <- cbind(total.subject, total.activity.descr.labels, mean_and_std_data)
head(data[,1:5])
aggregate(. ~ total.subject + total.activity.descr.labels, data=data, FUN=mean)
head(data)
head(data[,1:5])
require(reshape2)
s <- melt(data, id.vars=c("total.subject", "total.activity.descr.labels"), measure.vars=.)
s <- melt(data, id.vars=c("total.subject", "total.activity.descr.labels"), measure.vars=colnames(data)[,-1:2])
s <- melt(data, id.vars=c("total.subject", "total.activity.descr.labels"), measure.vars=colnames(data)[-1:2])
s <- melt(data, id.vars=c("total.subject", "total.activity.descr.labels"), measure.vars=colnames(data)[-(1:2)])
head(s)
s2 <- split(s, s$total.subject)
sapply(s2, function(x) mean(x$value))
aggregate(value ~ total.subject + total.activity.descr.labels + variable, data=s, FUN=mean
)
t <- aggregate(value ~ total.activity.descr.labels + total.subject + variable, data=s, FUN=mean)
head(t)
t <- t[,c(2,1,3,4)]
head(t)
?dcaset
?dcast
v <- dcast(t, total.subject ~ total.activity.desc.labels)
v <- dcast(t, total.subject ~ total.activity.descr.labels)
head(v)
dcast(t, total.subject + total.activity.descr.labels + variable ~ value)
airquality
names(airquality) <- tolower(names(airquality))
aqm <- melt(airquality, id=c("month","day"), na.rm=T)
head(aqm)
acast(aqm, day ~ month ~ variable)
head(dcast(aqm, month ~ variable, mean, margins=c("month","variable")))
head(t)
mean_for_each_subject_and_activity <- cast(data_melt, value ~ total.subject + total.activity.descr.labels + variable, mean)
mean_for_each_subject_and_activity <- dcast(data_melt, value ~ total.subject + total.activity.descr.labels + variable, mean)
data_melt <- melt(data_all, id.vars=c("total.subject", "total.activity.descr.labels"), measure.vars=colnames(data_all)[-(1:2)])
data_all <- cbind(total.subject, total.activity.descr.labels, mean_and_std_data)
data_melt <- melt(data_all, id.vars=c("total.subject", "total.activity.descr.labels"), measure.vars=colnames(data_all)[-(1:2)])
mean_for_each_subject_and_activity <- dcast(data_melt, value ~ total.subject + total.activity.descr.labels + variable, mean)
head(data_melt)
mean_for_each_subject_and_activity <- dcast(data_melt, total.subject + total.activity.descr.labels + variable ~ value, mean)
mean_for_each_subject_and_activity <- dcast(data_melt, total.subject + total.activity.descr.labels ~ variable, mean)
head(mean_for_each_subject_and_activity)
dim(mean_for_each_subject_and_activity)
unique(total.subject)
length(unique(total.subject))
length(total.activity.descr.labels)
length(unique(total.activity.descr.labels))
# downloading the data set using URL
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(url, destfile="Dataset.zip")
unzip("Dataset.zip")
### Merges the training and the test sets to create one data set.
train.set <- read.table("UCI HAR Dataset/train/X_train.txt", header=F)
test.set <- read.table("UCI HAR Dataset/test/X_test.txt", header=F)
total.set <- rbind(train.set, test.set)
###Extracts only the measurements on the mean and standard deviation for each measurement.
feature.labels <- read.table("UCI HAR Dataset/features.txt", header=F, stringsAsFactors=F)
feature.labels <- feature.labels$V2
mean_idx <- grep("mean()", feature.labels)
std_idx <- grep("std()", feature.labels)
mean_and_std_data <- total.set[, c(mean_idx, std_idx)]
### Uses descriptive activity names to name the activities in the data set
activity.labels <- read.table("UCI HAR Dataset/activity_labels.txt", header=F, stringsAsFactors=F)
train.activity <- read.table("UCI HAR Dataset/train/y_train.txt", header=F, stringsAsFactors = F)$V1
test.activity <- read.table("UCI HAR Dataset/test/y_test.txt", header=F, stringsAsFactors = F)$V1
total.activity <- c(train.activity, test.activity)
total.activity.descr.labels <- activity.labels$V2[total.activity]
### Appropriately labels the data set with descriptive variable names.
names(mean_and_std_data) <- feature.labels[c(mean_idx, std_idx)]
train.subject <- read.table("UCI HAR Dataset/train/subject_train.txt", header=F)$V1
test.subject <- read.table("UCI HAR Dataset/test/subject_test.txt", header=F)$V1
total.subject <- c(train.subject, test.subject)
data_all <- cbind(total.subject, total.activity.descr.labels, mean_and_std_data)
#From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
require(reshape2)
data_melt <- melt(data_all, id.vars=c("total.subject", "total.activity.descr.labels"), measure.vars=colnames(data_all)[-(1:2)])
mean_for_each_subject_and_activity <- dcast(data_melt, total.subject + total.activity.descr.labels ~ variable, mean)
head(mean_for_each_subject_and_activity)
getwd()
write.table(mean_for_each_subject_and_activity, file="tidydata.txt", row.name=F, sep="\t")
write.table(mean_for_each_subject_and_activity, file="tidydata.txt", row.name=F, sep="\t", quote=F)
getwd()
if (!file.exists('data')) dir.create("data")
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(url, destfile="/data/Dataset.zip")
download.file(url, destfile="data/Dataset.zip")
unzip("data/Dataset.zip")
unzip("./data/Dataset.zip")
?unzip
unzip("/data/Dataset.zip", exdir="./data/")
unzip("/data/Dataset.zip", exdir="/data/")
unzip("data/Dataset.zip")
unzip("data/Dataset.zip", exdir=".")
unzip("data/Dataset.zip", exdir="./data")
train.set <- read.table("./data/UCI HAR Dataset/train/X_train.txt", header=F)
test.set <- read.table("./data/UCI HAR Dataset/test/X_test.txt", header=F)
total.set <- rbind(train.set, test.set)
feature.labels <- read.table("./data/UCI HAR Dataset/features.txt", header=F, stringsAsFactors=F)
feature.labels <- feature.labels$V2
mean_idx <- grep("mean()", feature.labels)
std_idx <- grep("std()", feature.labels)
mean_and_std_data <- total.set[, c(mean_idx, std_idx)]
activity.labels <- read.table("./data/UCI HAR Dataset/activity_labels.txt", header=F, stringsAsFactors=F)
train.activity <- read.table("./data/UCI HAR Dataset/train/y_train.txt", header=F, stringsAsFactors = F)$V1
test.activity <- read.table("./data/UCI HAR Dataset/test/y_test.txt", header=F, stringsAsFactors = F)$V1
total.activity <- c(train.activity, test.activity)
total.activity.descr.labels <- activity.labels$V2[total.activity]
names(mean_and_std_data) <- feature.labels[c(mean_idx, std_idx)]
train.subject <- read.table("./data/UCI HAR Dataset/train/subject_train.txt", header=F)$V1
test.subject <- read.table("./data/UCI HAR Dataset/test/subject_test.txt", header=F)$V1
total.subject <- c(train.subject, test.subject)
data_all <- cbind(total.subject, total.activity.descr.labels, mean_and_std_data)
require(reshape2)
data_melt <- melt(data_all, id.vars=c("total.subject", "total.activity.descr.labels"), measure.vars=colnames(data_all)[-(1:2)])
mean_for_each_subject_and_activity <- dcast(data_melt, total.subject + total.activity.descr.labels ~ variable, mean)
head(mean_for_each_subject_and_activity)
names(mean_for_each_subject_and_activity)[1:2] <- c("Subject","Activity")
write.table(mean_for_each_subject_and_activity, file="tidydata.txt", row.names=F, sep="\t", quote=F)
